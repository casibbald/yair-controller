name: ci

on:
  pull_request:
  push:
    branches:
      - main
      - ^issues\/[0-9]{1,2}(-[0-9]{1,2}?)$
    tags:
      - '*'

env:
  RUST_TOOLCHAIN: nightly

jobs:
  clippy:
    name: Run Clippy
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt,clippy

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: musl-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features -- -D warnings -W clippy::pedantic -W clippy::nursery -W rust-2018-idioms


  lint:
    needs: [clippy]
    name: Run Pedantic Linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install protoc
        run: sudo apt-get install -y protobuf-compiler

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: musl-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt,clippy
      - run: cargo +${{ env.RUST_TOOLCHAIN }} fmt -- --check

      - uses: giraffate/clippy-action@v1
        with:
          reporter: 'github-pr-review'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          clippy_flags: --all-features

  test:
    needs : [clippy]
    name: Run Tests
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt,clippy

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: musl-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --all

  crdgen:
    needs : [clippy]
    name: CRD Generator
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt,clippy

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: musl-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args:

      - uses: extractions/setup-just@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: test generate crds
        run: just generate

      - name: Output crd.yaml
        run: cat yaml/doc_crds/crd.yaml


  integration:
    needs: [lint, test, crdgen]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2
      - uses: nolar/setup-k3d-k3s@v1
        with:
          version: v1.25
          k3d-name: kube
          k3d-args: "--no-lb --no-rollback --k3s-arg --disable=traefik,servicelb,metrics-server@server:*"

      - name: Build workspace
        run: cargo build
      - name: Install crd
        run: cargo run --bin crdgen | kubectl apply -f -
      - name: Run all default features integration library tests
        # run: cargo test --core --all -- --ignored # TODO correct this so it only runs core tests
        run: cargo test --all -- --ignored


  docker-base:
    runs-on: ubuntu-latest
    needs: [integration]
    steps:
      - uses: actions/checkout@v4

      # Build and push with docker buildx
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure tags based on git tags + latest
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: clux/controller
          tags: |
            type=pep440,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr

      - name: Docker login on main origin
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: musl-cargo-${{ hashFiles('**/Cargo.lock') }}

      # We use the clux/muslrust image to build a static binary
      # This is a multi-stage build, where we first compile the binary
        # and then copy our the binary ready for a docker build/package process.
      - name: Compile base features
        id: compile-docker
        run: |
          mkdir -p ~/.cargo/{git,registry}
          docker run --rm -t \
              --mount type=bind,source=${{ github.workspace }},target=/volume \
              --mount type=bind,source=$HOME/.cargo/registry,target=/root/.cargo/registry \
              --mount type=bind,source=$HOME/.cargo/git,target=/root/.cargo/git \
              clux/muslrust:nightly \
              cargo build --release --bin yapp-controller
          cp target/x86_64-unknown-linux-musl/release/yapp-controller ./yapp-controller-amd64
    

      - name: Docker buildx and push with base features
        id: build-docker
        uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha,scope=base
          cache-to: type=gha,scope=base,mode=max
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build-docker.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Persist base image build to a tarball
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha,scope=base
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload base docker image as artifact for e2e tests
        uses: actions/upload-artifact@v4
        with:
          name: yapp-controller-amd64
          path: /tmp/image.tar

  e2e:
    runs-on: ubuntu-latest
    needs: [ docker-base ]
    steps:
      - run: env
      - uses: actions/checkout@v4
      - uses: nolar/setup-k3d-k3s@v1
        with:
          version: v1.27
          k3d-name: kube
          k3d-args: "--no-lb --no-rollback --k3s-arg --disable=traefik,servicelb,metrics-server@server:*"
      - name: Install CRD and test resource
        run: |
          kubectl apply -f yaml/doc_crds/crd.yaml
          sleep 2
          kubectl apply -f yaml/doc_crds/instance-samuel.yaml
          kubectl apply -f yaml/doc_crds/instance-lorem.yaml
          kubectl apply -f yaml/doc_crds/instance-illegal.yaml
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Download docker image artifact from docker job
        uses: actions/download-artifact@v4
        with:
          name: yapp-controller-amd64
          path: /tmp
      - name: Load docker image from tarball
        run: docker load --input /tmp/image.tar
      - name: helm template | kubctl apply
        run: |
          docker images casibbald/yapp-controller
          image_tag="$(docker images casibbald/yapp-controller | egrep 'yapp-controller' | awk '{print $2}' | head -1)"
          image_tag="${image_tag:-latest}"
          echo "image tag: ${image_tag}"
          apiserver="$(kubectl get endpoints kubernetes -ojson | jq '.subsets[0].addresses[0].ip' -r)"
          helm template charts/yapp-controller \
            --set version=latest \
            --set networkPolicy.enabled=true \
            --set networkPolicy.apiserver.0=${apiserver}/32 \
            --set image.repository=ghcr.io/casibbald/yapp-controller \
            --set image.tag=${image_tag} \
            | kubectl apply -f -
      - run: sleep 2
      - run: kubectl get events
      - run: kubectl get pods
      - run: kubectl describe deployment yapp-controller
      - run: kubectl describe pod $(kubectl get pods | egrep 'yap-controller' | awk '{print $1}')
      - run: kubectl logs $(kubectl get pods | egrep 'yapp-controller' | awk '{print $1}' | head -1) --ignore-errors=true --previous=true
      - run: kubectl wait --for=condition=available deploy/yapp-controller --timeout=120s
      - run: kubectl get event --field-selector "involvedObject.kind=Document,involvedObject.name=samuel" | grep "HideRequested" || true
      - run: kubectl get doc -oyaml | grep -A1 finalizers | grep documents.kube.rs || true
      - run: kubectl logs $(kubectl get pods | egrep 'yapp-controller' | awk '{print $1}' | head -1) --ignore-errors=true --previous=true || true
      - run: kubectl logs deploy/yapp-controller --ignore-errors=true --previous=true
      - run: kubectl get netpol yapp-controller -oyaml
      - run: kubectl logs deploy/yapp-controller --ignore-errors=true --previous=true
      - run: |
          kubectl patch doc samuel --type='json' -p='[{"op": "remove", "path": "/metadata/finalizers"}]' || true
          kubectl patch doc illegal --type='json' -p='[{"op": "remove", "path": "/metadata/finalizers"}]' || true
          kubectl patch doc lorem --type='json' -p='[{"op": "remove", "path": "/metadata/finalizers"}]' || true

