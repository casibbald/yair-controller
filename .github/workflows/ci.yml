name: ci

on:
  pull_request:
  push:
    branches:
      - main
      - ^issues\/[0-9]{1,2}$
    tags:
      - '*'

env:
  RUST_TOOLCHAIN: nightly
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  clippy:
    name: Run Clippy
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt,clippy

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: musl-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features -- -D warnings -W clippy::pedantic -W clippy::nursery -W rust-2018-idioms


  lint:
    needs: [clippy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install protoc
        run: sudo apt-get install -y protobuf-compiler

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: musl-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt,clippy
      - run: cargo +${{ env.RUST_TOOLCHAIN }} fmt -- --check

      - uses: giraffate/clippy-action@v1
        with:
          reporter: 'github-pr-review'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          clippy_flags: --all-features

  test:
    needs : [clippy]
    name: Run Tests
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt,clippy

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: musl-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --all

  #
#  docker-otel:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      # Build and push with docker buildx
#      - name: Setup docker buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Configure tags based on git tags for otel
#        uses: docker/metadata-action@v5
#        id: meta
#        with:
#          images: microscaler/yapp-controller
#          tags: |
#            type=pep440,pattern={{version}},prefix=otel-
#            type=raw,value=otel,enable={{is_default_branch}}
#            type=ref,event=pr,prefix=otel-
#
#      - uses: actions/cache@v4
#        with:
#          path: |
#            ~/.cargo/registry/index/
#            ~/.cargo/registry/cache/
#            ~/.cargo/git/db/
#            target/
#          key: musl-cargo-otel-${{ hashFiles('**/Cargo.lock') }}
#
#      - name: Compile with telemetry
#        run: |
#          mkdir -p ~/.cargo/{git,registry}
#          docker run --rm -t \
#              --mount type=bind,source=${{ github.workspace }},target=/volume \
#              --mount type=bind,source=$HOME/.cargo/registry,target=/root/.cargo/registry \
#              --mount type=bind,source=$HOME/.cargo/git,target=/root/.cargo/git \
#              clux/muslrust:${{ env.RUST_TOOLCHAIN }} \
#              cargo build --features=telemetry --release --bin controller
#          cp target/x86_64-unknown-linux-musl/release/controller .
#
#      - name: Docker login on main origin
#        uses: docker/login-action@v3
#        if: github.event_name != 'pull_request'
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Docker buildx and push with telemetry
#        uses: docker/build-push-action@v6
#        with:
#          context: .
#          cache-from: type=gha,scope=otel
#          cache-to: type=gha,scope=otel,mode=max
#          push: ${{ github.ref == 'refs/heads/main' }}
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#          platforms: linux/amd64
#
#  e2e:
#    runs-on: ubuntu-latest
#    needs: [docker-base]
#    steps:
#      - uses: actions/checkout@v4
#      - uses: nolar/setup-k3d-k3s@v1
#        with:
#          version: v1.27
#          k3d-name: kube
#          k3d-args: "--no-lb --no-rollback --k3s-arg --disable=traefik,servicelb,metrics-server@server:*"
#      - run: kubectl apply -f yaml/crd.yaml
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#      - name: Download docker image artifact from docker job
#        uses: actions/download-artifact@v4
#        with:
#          name: controller-image
#          path: /tmp
#      - name: Load docker image from tarball
#        run: docker load --input /tmp/image.tar
#      - name: helm template | kubctl apply
#        run: |
#          apiserver="$(kubectl get endpoints kubernetes -ojson | jq '.subsets[0].addresses[0].ip' -r)"
#          helm template charts/doc-controller \
#            --set version=latest \
#            --set networkPolicy.enabled=true \
#            --set networkPolicy.apiserver.0=${apiserver}/32 \
#            | kubectl apply -f -
#      - run: kubectl wait --for=condition=available deploy/doc-controller --timeout=30s
#      - run: kubectl apply -f yaml/instance-samuel.yaml
#      - run: sleep 2 # TODO: add condition on status and wait for it instead
#      # verify reconcile actions have happened
#      - run: kubectl get netpol doc-controller -oyaml
#      - run: kubectl logs deploy/doc-controller
#      - run: kubectl get event --field-selector "involvedObject.kind=Document,involvedObject.name=samuel" | grep "HideRequested"
#      - run: kubectl get doc -oyaml | grep -A1 finalizers | grep documents.kube.rs
#

  #  integration:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: dtolnay/rust-toolchain@${{ env.RUST_TOOLCHAIN }}
#      - uses: Swatinem/rust-cache@v2
#      - uses: nolar/setup-k3d-k3s@v1
#        with:
#          version: v1.25
#          k3d-name: kube
#          k3d-args: "--no-lb --no-rollback --k3s-arg --disable=traefik,servicelb,metrics-server@server:*"
#
#      - name: Build workspace
#        run: cargo build
#      - name: Install crd
#        run: cargo run --bin crdgen | kubectl apply -f -
#      - name: Run all default features integration library tests
#        run: cargo test --lib --all -- --ignored
#


#  unit:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 2
#      - uses: dtolnay/rust-toolchain@${{ env.RUST_TOOLCHAIN }}
#      - uses: Swatinem/rust-cache@v2
#
#      # Real CI work starts here
#      - name: Build workspace
#        run: cargo build
#      - name: Run workspace unit tests
#        run: cargo test
#      - name: Generate crd.yaml
#        run: cargo run --bin crdgen > yaml/crd.yaml
#      - name: Generate deployment.yaml
#        run: helm template charts/doc-controller > yaml/deployment.yaml
#      - name: Ensure generated output is committed
#        run: |
#          if ! git diff --exit-code yaml/; then
#              echo "Uncommitted changes in yaml directory"
#              echo "Please run 'just generate' and commit the results"
#              exit 1
#          fi

  docker-base:
    timeout-minutes: 10
    needs: [lint, test]
    runs-on: ubuntu-latest
    env:
      RUST_TOOLCHAIN: nightly
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - uses: actions/checkout@v4
      - name: Unshallow
        if: ${{ inputs.ref != '' }}
        run: |
          git fetch --prune --unshallow
          git fetch --tags -f

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: musl-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Build and push with docker buildx
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Set build-time flags
        run: |
          echo "LDFLAGS=$(make echo-ldflags)" >> $GITHUB_ENV

      - name: Configure tags based on git tags + latest
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: microscaler/yapp-controller
          tags: |
            type=pep440,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr
          labels: |
            maintainer=microscaler
            org.opencontainers.image.title='YAPP Controller'
            org.opencontainers.image.description='Yet Another Pipeline Pusher'
            org.opencontainers.image.vendor='Acme Corporation'
            org.opencontainers.image.license='Apache-2.0'

      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: musl-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Compile base features
        run: |
          mkdir -p ~/.cargo/{git,registry}
          docker run --rm -t \
              --mount type=bind,source=${{ github.workspace }},target=/volume \
              --mount type=bind,source=$HOME/.cargo/registry,target=/root/.cargo/registry \
              --mount type=bind,source=$HOME/.cargo/git,target=/root/.cargo/git \
              clux/muslrust:${{ env.RUST_TOOLCHAIN }} \
              cargo build --release --bin yapp-controller
          cp target/x86_64-unknown-linux-musl/release/yapp-controller .

      - uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          platforms: ${{ inputs.platforms }}
          cache-to: type=gha,scope=base,mode=max
          build-args: |
            GIT_COMMIT=${{ github.sha }}
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=base
          outputs: type=docker,dest=/tmp/image.tar

#      # Signing image is broken
#      - name: Install cosign
##        if: ${{ inputs.push }}
#        uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0
#      - name: Keyless signing of image
##        if: ${{ inputs.push }}
#        run: |
#          cosign sign --yes ${{ inputs.image }}@${{ steps.build.outputs.digest }}
#      - name: Verify the image signing
##        if: ${{ inputs.push }}
#        run: |
#          cosign verify ${{ inputs.image }}@${{ steps.build.outputs.digest }} \
#            --certificate-identity "https://github.com/${{ github.workflow_ref }}" \
#            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" | jq .

      - name: Upload base docker image as artifact for e2e tests
        uses: actions/upload-artifact@v4
        with:
          name: yapp-controller-image
          path: /tmp/image.tar